#include<stdio.h>
#include<stdlib.h>

struct knapsack
{
	int p;
	int w;
	float pw;
	
};

int comparator1(const void *a,const void *b) //FOR MAX PROFIT SELECTION
{
	struct knapsack *a1=(struct knapsack *)a;
	struct knapsack *b1=(struct knapsack *)b;
	
	if(a1->p < b1->p)return 1;
	if(a1->p > b1->p)return -1;
}

int comparator2(const void *a,const void *b) //FOR MIN WEIGHT SELECTION
{
	struct knapsack *a1=(struct knapsack *)a;
	struct knapsack *b1=(struct knapsack *)b;
	
	if(a1->w < b1->w)return -1;
	if(a1->w > b1->w)return 1;
}

int comparator3(const void *a,const void *b) // FOR DECREASING Pi/Wi
{
	struct knapsack *a1=(struct knapsack *)a;
	struct knapsack *b1=(struct knapsack *)b;
	
	if(a1->pw < b1->pw)return 1;
	if(a1->pw > b1->pw)return -1;
}

void SolutionVectorPrint(float temp[],struct knapsack K[],int n)
{
    int i;
    printf("ITEMS        PRICE         WEIGHT         FRACTION OF AN ITEM SELECTED\n");
    for(i=0;i<n;i++)
    {
        printf("%d",i+1);
        printf("%15d",K[i].p);
        printf("%15d",K[i].w);
        printf("%25f\n",temp[i]);
    }
}

float maxP_Greedyknapsack(struct knapsack *K,int n,int maxW)
{
	int i,U=maxW;
	float sum=0.0,temp[10];
	
	for(i=0;i<n;i++)
	temp[i]=0.0;
	
		qsort(K,n,sizeof(struct knapsack),comparator1);
	
	for(i=0;i<n;i++)
	{
		if(K[i].w > U)
		{
			break;	
		}
	
		
		temp[i]=1;
		U=U-K[i].w;	
	}
	
		if(i<n)
			temp[i]=(float)U/(float)K[i].w;


   SolutionVectorPrint(temp,K,n);
	for(i=0;i<n;i++)
	{
		sum+=(temp[i]*K[i].p);
	}
	return sum;
	
}

float minP_Greedyknapsack(struct knapsack *K,int n,int maxW)
{
	int i,U=maxW;
	float sum=0.0,temp[10];
	
	for(i=0;i<n;i++)
	temp[i]=0.0;
	
		qsort(K,n,sizeof(struct knapsack),comparator2);
	for(i=0;i<n;i++)
	{
		if(K[i].w > U)
		{
			break;	
		}
	
		
		temp[i]=1;
		U=U-K[i].w;	
	}
	
		if(i<n)
			temp[i]=U/(float)K[i].w;
	
	SolutionVectorPrint(temp,K,n);
	for(i=0;i<n;i++)
	{
		sum+=(temp[i]*K[i].p);
	}
	return sum;
	
}

float decreasingPW_Greedyknapsack(struct knapsack *K,int n,int maxW)
{
	int i,U=maxW;
	float sum=0.0,temp[10];
	
	for(i=0;i<n;i++)
	temp[i]=0.0;
	
	for(i=0;i<n;i++)
	{
		K[i].pw=(float)K[i].p/(float)K[i].w;
	}
	
	qsort(K,n,sizeof(struct knapsack),comparator3);
	
	
	for(i=0;i<n;i++)
	{
		if(K[i].w > U)
		{
			break;	
		}
	
		
		temp[i]=1;
		U=U-K[i].w;	
	}
	
		if(i<n)
			temp[i]=U/(float)K[i].w;
	
	SolutionVectorPrint(temp,K,n);
	for(i=0;i<n;i++)
	{
		sum+=(temp[i]*K[i].p);
	}
	return sum;
	
}

float MAX3(float a, float b, float c)
{
	if(a>b&&a>c)
	return a;
	else if(b>a&&b>c)
	return b;
	else
	return c;
}

int main()
{
	struct knapsack K[10];
	int i,n,maxW,c1;
    float a,b,c;
	
	printf("ENTER THE NUMBER OF ENTITIES: ");
	scanf("%d",&n);
	
	printf("ENTER THE MAXIMUM CAPACITY OF THE BAG: ");
	scanf("%d",&maxW);
	
	printf("\n\nENTER PROFIT AND WEIGHT, (FORMAT: P,W)\n");
	for(i=0;i<n;i++)
	{
		printf("[%d]: ",i+1);
		scanf("%d,%d",&K[i].p,&K[i].w);
	}

    
    printf("\n\n1: CHOOSE ITEMS WITH MAXIMUM PRICE\n");
    printf("2: CHOOSE ITEMS WITH MINIMUM WEIGHT\n");
    printf("3: CHOOSE ITEMS IN DECREASING ORDER OF Pi/Wi\n");
    printf("ENTER YOUR CHOICE: ");
    scanf("%d",&c1);

    switch(c1)
    {
        case 1:
        printf("\n\n       *****SELECTION OF ITEMS WITH MAXIMUM PRICE*****\n");
        a=maxP_Greedyknapsack(K,n,maxW);
        break;

        case 2:
         printf("\n\n      *****SELECTION OF ITEMS WITH MINIMUM WEIGHT ITEMS*****\n");
        b=minP_Greedyknapsack(K,n,maxW);

        break;

        case 3:
         printf("\n\n      *****SELECTION OF ITEMS IN DECREASING ORDER OF Pi/Wi*****\n");
        c=decreasingPW_Greedyknapsack(K,n,maxW);
        break;
    }


}
