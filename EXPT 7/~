#include<stdio.h>
#include<stdlib.h>
#define MAX 20
int p[MAX],n,v,c=0;
struct EDGE
{
  int src;
  int dest;
  int w;
}E[MAX],FINAL[MAX];

int comparator(const void *a,const void *b)
{
  struct EDGE *a1=(struct EDGE *)a;
  struct EDGE *b1=(struct EDGE *)b;
  if(a1->w<b1->w)return -1;
  if(a1->w>b1->w)return 1;
}

void edge_input()
{
  int  i;
  printf("ENTER NUMBER OF VERTICES: ");
  scanf("%d",&v);
  printf("ENTER YOUR EDGES (FORMAT: Source,Destination,Weight)\n");
  printf("ENTER -1,-1,-1 TO EXIT\n");
  for(i=0;i<v*v-1;i++)
  {
    printf("[%d]: ",i);
    scanf("%d,%d,%d",&E[i].src,&E[i].dest,&E[i].w);
    if(E[i].src==-1&&E[i].dest==-1&&E[i].w==-1)
    break;
  }
  n=i;
}

void Union(int i,int j)
{ p[i]=j; }

int Find(int i)
{
  while(p[i]>=0)
  i=p[i];

  return i;
}

int KruskalMST()
{
  int i,j,k;
  qsort(E,n,sizeof(struct EDGE),comparator);
  for(i=0;i<n;i++)
  p[i]=-1;

  i=0;
  int minCost=0;
  while(i<v-1)
  { 
    j=Find(E[i].src);
    k=Find(E[i].dest);
    if(j!=k)
    {
      i++,c++;
      FINAL[i]=E[i];
      minCost+=E[i].w;
      Union(j,k);
    }
  }
  if(i!=v-1)
  printf("NO SPANNING TREE\n");
  return(minCost);
  
}

void printEdge(struct EDGE *x,int n1)
{
  printf("*********************************\n");
  printf("SOURCE     DESTINATION     WEIGHT\n");
  printf("*********************************\n");
  int i;
  for(i=0;i<n1;i++)
  {
    printf("%-15d",x[i].src);
    printf("%-14d",x[i].dest);
    printf("%-10d\n",x[i].w);
  }
  printf("*********************************\n");
}

int main()
{
 edge_input();
 KruskalMST();
 printEdge(FINAL, c);
 printf("MINCOST=%d",KruskalMST());
}

